<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[grep命令初探]]></title>
    <url>%2F2019%2F05%2F02%2Fgrep%E5%91%BD%E4%BB%A4%E5%88%9D%E6%8E%A2%2F</url>
    <content type="text"><![CDATA[什么是grep对于在线上服务器排查错误，学会分析log就变得异常重要，grep命令具有非常强大的文本过滤能力，是一个很好的日志过滤工具。 首先需要注意的是， grep命令是按行过滤日志的，格式为grep [options] pattern file，options支持像-A，-B，-e，-E，-f，-i，-n，-v，-r等，pattern支持常见的正则匹配，以下对其进行详细介绍。 grep参数解析 grep -A 显示目标行及之后(after)的n行，如果有多个匹配结果，则以--分割 以foo.txt为例 12345678910➜ cat foo.txtjava pythonC# bashgroovygo scalajavascript➜ grep 'java' foo.txtjava pythonjavascript 过滤foo.txt中含有&#39;java&#39;的所在行及其之后的2行数据 123456➜ grep -A 2 'java' foo.txtjava pythonC# bashgroovy--javascript grep -B 显示目标行及之前(before)的n行，如果有多个匹配结果，则以--分割 123456➜ grep -B 2 'java' foo.txtjava python--groovygo scalajavascript grep -i 匹配时不分大小写 12➜ grep -i 'c#' foo.txtC# bash grep -e 可以利用多个条件进行或匹配 123➜ grep -e 'go' -e 'bash' foo.txtC# bashgo scala grep -E 可以看作是grep -e的简单版，对多个条件进行或匹配，直接以|分隔 123➜ grep -E 'go|bash' foo.txtC# bashgo scala 如果要使用grep命令进行与操作，那么可以利用正则，以下匹配同时含有&#39;go&#39;和&#39;scala&#39;的行 12➜ grep 'go.*scala' foo.txtgo scala grep -f grep -f reg.txt foo.txt为以reg.txt定义的规则过滤foo.txt里的内容 1234567➜ cat reg.txtjavagr.*vy➜ grep -f reg.txt foo.txtjava pythongroovyjavascript grep -n 显示过滤行的行数 1234567891011➜ cat foo.txtjava pythonC# bashgroovygo scalajavascript➜ grep -f reg.txt -n foo.txt1:java python3:groovy5:javascript grep -v 显示未匹配到的行。以下显示未匹配到的行，并显示行号 123➜ grep -f reg.txt -n -v foo.txt2:C# bash4:go scala grep -r 之前介绍的grep命令都是对某一特定文本进行过滤，如果想对某一目录下的所有文件都进行过滤，那么可以用此命令。 123456➜ ls unixfoo.txt reg.txt➜ grep 'java' -r -n unixunix/foo.txt:1:java pythonunix/foo.txt:5:javascriptunix/reg.txt:1:java grep -L 过滤文件内容不符合特定pattern的所有文件名称，可与-r命令一起使用 grep -l 过滤文件内容符合特定pattern的所有文件名称，可以-r命令一起使用 123456➜ ls unixfoo.txt reg.txt➜ grep -Lr 'javascript' unixunix/reg.txt➜ grep -lr 'javascript' unixunix/foo.txt grep -w 过滤精确匹配整行的结果，如果未精确匹配，则过滤结果为空 12345678910➜ cat foo.txtjava pythonC# bashgroovygo scalajavascript➜ grep -w 'java python' foo.txtjava python➜ grep -w 'java pytho' foo.txt&lt;empty result&gt; grep -c 统计过滤的行数，注意是行哦 12345678➜ cat foo.txtjava pythonC# bashgroovygo scalajavascript➜ grep 'java' -c foo.txt2 总结看了上面的介绍，是不是对grep有了一定的了解呢？赶紧动手试试吧～]]></content>
      <tags>
        <tag>linux</tag>
        <tag>grep</tag>
      </tags>
  </entry>
</search>
